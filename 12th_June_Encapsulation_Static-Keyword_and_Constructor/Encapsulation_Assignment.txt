1. What is Encapsulation in Java? Why is it called Data hiding?
Ans: Encapsulation in Java is the concept of wrapping data (variables) and the code that works on the data (methods) together into a single unit called a class. It's called Data hiding because it hides the internal details of how the data is stored and modified from outside users. The data is kept private, and access to it is controlled through public methods.



2. What are the important features of Encapsulation?
Ans: 
    a. Data Hiding: The internal state of the object is hidden from the outside world.
Controlled Access: You can control what data can be accessed or modified by providing public methods like getters and setters.
    b. Improved Security: By keeping data private, you protect it from unwanted changes.
    c. Modularity: The class can be changed internally without affecting other parts of the program.



3. What are getter and setter methods in Java? Explain with an example.
Ans: Getter and setter methods are used to access and modify private data in a class.

 Getter: A method that retrieves (gets) the value of a private variable.
 Setter: A method that updates (sets) the value of a private variable.

        class Person {
            private String name; // private data

            // Getter method
            public String getName() {
                return name;
            }

            // Setter method
            public void setName(String name) {
                this.name = name;
            }
        }

        public class Main {
            public static void main(String[] args) {
                Person p = new Person();
                p.setName("John"); // Set the name using setter
                System.out.println(p.getName()); // Get the name using getter
            }
        }



4. What is the use of this keyword? Explain with an example.
Ans: The `this` keyword is used to refer to the current object inside a class. It helps to avoid confusion between instance variables (attributes of the object) and parameters with the same name.

        class Person {
            private String name;

            // Constructor
            public Person(String name) {
                this.name = name; // 'this.name' refers to the instance variable, 'name' refers to the parameter
            }

            public void display() {
                System.out.println("Name: " + this.name);
            }
        }

        public class Main {
            public static void main(String[] args) {
                Person p = new Person("Alice");
                p.display(); // Outputs: Name: Alice
            }
        }



5. What is the advantage of Encapsulation?
Ans: The main advantage of encapsulation is data protection. It keeps the data safe from outside interference and misuse. Only authorized methods can change the data, and it ensures that the object maintains a valid state.



6. How to achieve encapsulation in Java? Give an example.
Ans: To achieve encapsulation in Java:
    1. Make variables private so they cannot be accessed directly from outside the class.
    2. Provide public getter and setter methods to control access to these variables.

        class BankAccount {
            private double balance; // private variable

            // Getter method for balance
            public double getBalance() {
                return balance;
            }

            // Setter method for balance
            public void deposit(double amount) {
                if (amount > 0) {
                    balance += amount;
                }
            }

            // Withdraw method to control balance
            public void withdraw(double amount) {
                if (amount > 0 && amount <= balance) {
                    balance = amount;
                }
            }
        }

        public class Main {
            public static void main(String[] args) {
                BankAccount account = new BankAccount();
                account.deposit(1000); // Add money to balance
                System.out.println("Balance: " + account.getBalance()); // Check balance
                account.withdraw(500); // Withdraw money
                System.out.println("Balance: " + account.getBalance()); // Check balance again
            }
        }
