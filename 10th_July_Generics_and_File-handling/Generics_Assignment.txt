
1. What is Input and Output Stream in Java?
Ans:
    Input Stream:
        An input stream is a stream used for reading data from a source, such as a file, network connection, or keyboard input.
        It provides methods to read data from the source, including bytes, characters, or other data types.
        Input streams are typically used for operations like reading a file, receiving data from a network socket, or reading user input from the console.

    Output Stream:
        An output stream is a stream used for writing data to a destination, such as a file, network connection, or console output.
        It provides methods to write data to the destination, including bytes, characters, or other data types.
        Output streams are typically used for operations like creating or writing to a file, sending data over a network, or displaying information to the console.



 2. What are the methods of OutputStream?
Ans:
    write() - writes the specified byte to the output streamO
    write(byte[] array) - writes the bytes from the specified array to the output streamO
    flush() - forces to write all data present in the output stream to the destinationO
    close() - closes the output streamP



3. What is serialization in Java?
Ans: Serialization in Java is a mechanism that allows you to convert an object into a stream of bytes, which can be easily saved to a file, sent over a network, or stored in a database. The primary purpose of serialization is to enable the persistence and transfer of objects in a platform-independent way. 




4. What is the Serializable interface in Java?
Ans: The Serializable interface in Java is a marker interface that is used to indicate that a class can be serialized. Serialization is the process of converting an object's state into a byte stream, which can be saved to a file, sent over a network, or stored in a database. The Serializable interface doesn't contain any methods or fields; it simply serves as a marker to tell the Java runtime that the class can be serialized.



5. What is deserialization in Java?
Ans: Deserialization in Java is the process of converting a stream of bytes, typically obtained from a previously serialized object, back into an object's state. It is the reverse operation of serialization, where an object's data is reconstructed from the byte stream to create an instance of the object.



6. How is serialization achieved in Java?
Ans: Serialization in Java is achieved by following a specific process using the ObjectOutputStream class to convert objects into a stream of bytes, which can be saved, transmitted, or stored, and the ObjectInputStream class to perform the reverse operation, deserialization, to recreate objects from the byte stream. 



7. How is deserialization achieved in Java?
Ans: Deserialization in Java is the process of converting a stream of bytes, typically obtained from a previously serialized object, back into an object's state. It is achieved using the ObjectInputStream class, which reads the byte stream and reconstructs the original object.



8. How can you avoid certain member variables of class from getting Serialized?
Ans: To avoid certain member variables of a class from getting serialized in Java, you can mark those variables as transient. The transient keyword is used to indicate that a particular variable should not be included in the serialization process. Here's how you can use transient to prevent the serialization of specific member variables.



9. What classes are available in the Java IO File Classes API?
Ans:
    File
    RandomAccessFile
    FileInputStream
    FileReader
    FileMutputStream
    FileWriter



10. What is Difference between Externalizable and Serialization interface ?
Ans:
    Serializable Interface:
        The Serializable interface provides automatic and default serialization and deserialization behavior for an object.
        By implementing Serializable, you allow the Java runtime to handle the serialization and deserialization process automatically.
        You don't have to provide custom methods for reading and writing object data; the process is handled internally.

    Externalizable Interface:
        The Externalizable interface gives you more control and customization over the serialization and deserialization process.
        When a class implements Externalizable, it must provide its own writeExternal and readExternal methods to specify how the object's data should be written to and read from the byte stream.
        This allows you to customize the serialization and deserialization logic to handle complex object structures or special requirements.

    Serializable Interface:
        When you implement Serializable, you should be cautious about changes to the class structure over time. Changes can impact the compatibility and versioning of serialized objects.
        Serialization of a class with a different version can lead to version-related issues, such as InvalidClassException.

    Externalizable Interface:
        Externalizable allows more fine-grained control over versioning. You can implement custom logic to handle different versions of the class and control how the object's data is read and written.


